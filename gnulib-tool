#! /bin/sh
#
# Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

# This program is meant for authors or maintainers which want to import
# modules from gnulib into their packages.

progname=$0
package=gnulib
cvsdatestamp='$Date: 2005-08-31 20:54:49 $'
last_checkin_date=`echo "$cvsdatestamp" | sed -e 's,^\$[D]ate: ,,'`
version=`echo "$last_checkin_date" | sed -e 's/ .*$//' -e 's,/,-,g'`

# You can set AUTOCONFPATH to empty if autoconf 2.57 is already in your PATH.
AUTOCONFPATH=
#case $USER in
#  bruno )
#    AUTOCONFBINDIR=/packages/gnu-inst-autoconf/2.57/bin
#    AUTOCONFPATH="eval env PATH=${AUTOCONFBINDIR}:\$PATH "
#    ;;
#esac

AUTORECONF="${AUTOCONFPATH}autoreconf"

# func_usage
# outputs to stdout the --help usage message.
func_usage ()
{
  echo "\
Usage: gnulib-tool --list
       gnulib-tool --import [module1 ... moduleN]
       gnulib-tool --create-testdir --dir=directory module1 ... moduleN
       gnulib-tool --create-megatestdir --dir=directory [module1 ... moduleN]
       gnulib-tool --test --dir=directory module1 ... moduleN
       gnulib-tool --megatest --dir=directory [module1 ... moduleN]
       gnulib-tool --extract-description module
       gnulib-tool --extract-filelist module
       gnulib-tool --extract-dependencies module
       gnulib-tool --extract-autoconf-snippet module
       gnulib-tool --extract-automake-snippet module
       gnulib-tool --extract-include-directive module
       gnulib-tool --extract-license module
       gnulib-tool --extract-maintainer module
       gnulib-tool --extract-tests-module module

Operation modes:
      --list                print the available module names
      --import              import the given modules into the current package
      --create-testdir      create a scratch package with the given modules
      --create-megatestdir  create a mega scratch package with the given modules
                            one by one and all together
      --test                test the combination of the given modules
                            (recommended to use CC=\"gcc -Wall\" here)
      --megatest            test the given modules one by one and all together
                            (recommended to use CC=\"gcc -Wall\" here)
      --extract-description        extract the description
      --extract-filelist           extract the list of files
      --extract-dependencies       extract the dependencies
      --extract-autoconf-snippet   extract the snippet for configure.ac
      --extract-automake-snippet   extract the snippet for lib/Makefile.am
      --extract-include-directive  extract the #include directive
      --extract-license            report the license terms of the source files
                                   under lib/
      --extract-maintainer         report the maintainer(s) inside gnulib
      --extract-tests-module       report the unit test module, if it exists

Options:
      --dir=DIRECTORY       specify the target directory
                            For --import, this specifies where your
                            configure.ac can be found.  Defaults to current
                            directory.
      --lib=LIBRARY         Specify the library name.  Defaults to 'libgnu'.
      --source-base=DIRECTORY
                            Directory relative --dir where source code is
                            placed (default \"lib\"), for --import.
      --m4-base=DIRECTORY   Directory relative --dir where *.m4 macros are
                            placed (default \"m4\"), for --import.
      --tests-base=DIRECTORY
                            Directory relative --dir where unit tests are
                            placed (default \"tests\"), for --import.
      --aux-dir=DIRECTORY   Directory relative --dir where auxiliary build
                            tools are placed (default \"build-aux\").
      --with-tests          Include unit tests for the included modules.
      --avoid=MODULE        Avoid including the given MODULE. Useful if you
                            have code that provides equivalent functionality.
                            This option can be repeated.
      --lgpl                Abort if modules aren't available under the LGPL.
                            Also modify license template from GPL to LGPL.
      --libtool             Use libtool rules, for --import.
      --macro-prefix=PREFIX  Specify the prefix of the macros 'gl_EARLY' and
                            'gl_INIT'. Default is 'gl'.
      --no-changelog        don't update or create ChangeLog files
      --dry-run             For --import, only print what would have been done.
  -s, --symbolic, --symlink Make symbolic links instead of copying files.

Report bugs to <bug-gnulib@gnu.org>."
}

# func_version
# outputs to stdout the --version message.
func_version ()
{
  echo "$progname (GNU $package) $version"
  echo "Copyright (C) 2002-2005 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
  echo "Written by" "Bruno Haible" "and" "Simon Josefsson"
}

# func_fatal_error message
# outputs to stderr a fatal error message, and terminates the program.
func_fatal_error ()
{
  echo "gnulib-tool: *** $1" 1>&2
  echo "gnulib-tool: *** Stop." 1>&2
  exit 1
}

# func_cp_if_changed SRC DEST
# Like cp, but avoids munging timestamps if the file hasn't changed.
# Uses also the variables
# - dry_run         true if actions shall only be printed, blank otherwise
func_cp_if_changed ()
{
  if test $# -ne 2; then
    echo "usage: func_cp_if_changed SRC DEST" >&2
  fi
  test -n "$dry_run" && dry=echo
  if cmp "$1" "$2" >/dev/null 2>&1; then
    :
  else
    $dry cp -p "$1" "$2"
  fi
}

# func_mv_if_changed SRC DEST
# Like mv, but avoids munging timestamps if the file hasn't changed.
# Removes SRC if it is not renamed.
# Uses also the variables
# - dry_run         true if actions shall only be printed, blank otherwise
func_mv_if_changed ()
{
  if test $# -ne 2; then
    echo "usage: func_mv_if_changed SRC DEST" >&2
  fi
  test -n "$dry_run" && dry=echo
  if cmp "$1" "$2" >/dev/null 2>&1; then
    $dry rm "$1"
  else
    $dry mv "$1" "$2"
  fi
}

# func_ln_if_changed SRC DEST
# Like ln -s, but avoids munging timestamps if the link is correct.
# Uses also the variables
# - dry_run         true if actions shall only be printed, blank otherwise
func_ln_if_changed ()
{
  if test $# -ne 2; then
    echo "usage: func_ln_if_changed SRC DEST" >&2
  fi
  test -n "$dry_run" && dry=echo
  if test -L "$2" -a "$1" = "`readlink "$2"`"; then
    :
  else
    $dry rm -f "$2"
    $dry ln -s "$1" "$2"
  fi
}

# Command-line option processing.
# Removes the OPTIONS from the arguments. Sets the variables:
# - mode            list or import or create-testdir or create-megatestdir
# - destdir         from --dir
# - libname, supplied_libname  from --lib
# - sourcebase      from --source-base
# - m4base          from --m4-base
# - testsbase       from --tests-base
# - auxdir          from --aux-dir
# - inctests        true if --with-tests was given, blank otherwise
# - avoidlist       list of modules to avoid, from --avoid
# - lgpl            true if --lgpl was given, blank otherwise
# - libtool         true if --libtool was given, blank otherwise
# - do_changelog    false if --no-changelog was given, : otherwise
# - dry_run         true if --dry-run was given, blank otherwise
{
  mode=
  destdir=
  libname=libgnu
  supplied_libname=
  sourcebase=
  m4base=
  testsbase=
  auxdir=
  inctests=
  avoidlist=
  lgpl=
  libtool=
  macro_prefix=
  do_changelog=:
  dry_run=
  symbolic=

  supplied_opts="$@"

  while test $# -gt 0; do
    case "$1" in
      --list | --lis )
        mode=list
        shift ;;
      --import | --impor | --impo | --imp | --im | --i )
        mode=import
        shift ;;
      --create-testdir | --create-testdi | --create-testd | --create-test | --create-tes | --create-te | --create-t )
        mode=create-testdir
        shift ;;
      --create-megatestdir | --create-megatestdi | --create-megatestd | --create-megatest | --create-megates | --create-megate | --create-megat | --create-mega | --create-meg | --create-me | --create-m )
        mode=create-megatestdir
        shift ;;
      --test | --tes | --te | --t )
        mode=test
        shift ;;
      --megatest | --megates | --megate | --megat | --mega | --meg | --me | --m )
        mode=megatest
        shift ;;
      --extract-* )
        mode=`echo "X$1" | sed -e 's/^X--//'`
        shift ;;
      --dir )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --dir"
        fi
        destdir=$1
        shift ;;
      --dir=* )
        destdir=`echo "X$1" | sed -e 's/^X--dir=//'`
        shift ;;
      --lib )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --lib"
        fi
        libname=$1
        supplied_libname=true
        shift ;;
      --lib=* )
        libname=`echo "X$1" | sed -e 's/^X--lib=//'`
        supplied_libname=true
        shift ;;
      --source-base )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --source-base"
        fi
        sourcebase=$1
        shift ;;
      --source-base=* )
        sourcebase=`echo "X$1" | sed -e 's/^X--source-base=//'`
        shift ;;
      --m4-base )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --m4-base"
        fi
        m4base=$1
        shift ;;
      --m4-base=* )
        m4base=`echo "X$1" | sed -e 's/^X--m4-base=//'`
        shift ;;
      --tests-base )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --tests-base"
        fi
        testsbase=$1
        shift ;;
      --tests-base=* )
        testsbase=`echo "X$1" | sed -e 's/^X--tests-base=//'`
        shift ;;
      --aux-dir )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --aux-dir"
        fi
        auxdir=$1
        shift ;;
      --aux-dir=* )
        auxdir=`echo "X$1" | sed -e 's/^X--aux-dir=//'`
        shift ;;
      --with-tests )
        inctests=true
        shift ;;
      --avoid )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --avoid"
        fi
        avoidlist="$avoidlist $1"
        shift ;;
      --avoid=* )
        avoidlist="$avoidlist "`echo "X$1" | sed -e 's/^X--avoid=//'`
        shift ;;
      --lgpl )
        lgpl=true
        shift ;;
      --libtool )
        libtool=true
        shift ;;
      --macro-prefix )
        shift
        if test $# = 0; then
          func_fatal_error "missing argument for --macro-prefix"
        fi
        macro_prefix="$1"
        shift ;;
      --macro-prefix=* )
        macro_prefix=`echo "X$1" | sed -e 's/^X--macro-prefix=//'`
        shift ;;
      --no-changelog | --no-changelo | --no-changel | --no-change | --no-chang | --no-chan | --no-cha | --no-ch | --no-c )
        do_changelog=false
        shift ;;
      --dry-run )
        dry_run=true
        shift ;;
      -s | --symbolic | --symlink )
        symbolic=true
        shift ;;
      --help | --hel | --he | --h )
        func_usage
        exit 0 ;;
      --version | --versio | --versi | --vers | --ver | --ve | --v )
        func_version
        exit 0 ;;
      -- )
        # Stop option prcessing
        shift
        break ;;
      -* )
        echo "gnulib-tool: unknown option $1" 1>&2
        echo "Try 'gnulib-tool --help' for more information." 1>&2
        exit 1 ;;
      * )
        break ;;
    esac
  done
}

case "$0" in
  /*) self_abspathname="$0" ;;
  */*) self_abspathname=`pwd`/"$0" ;;
  *) for d in `echo ":$PATH:" | sed -e 's/:::*/:.:/g' | sed -e 's/:/ /g'`; do
       if test -x "$d/$0" && test ! -d "$d/$0"; then
         self_abspathname="$d/$0"
         break
       fi
     done
     if test -z "$self_abspathname"; then
       func_fatal_error "could not locate the gnulib-tool program - how did you invoke it?"
     fi
     ;;
esac
while test -h "$self_abspathname"; do
  # Resolve symbolic link.
  sedexpr1='s, -> ,#%%#,'
  sedexpr2='s,^.*#%%#\(.*\)$,\1,p'
  linkval=`LC_ALL=C ls -l "$self_abspathname" | sed -e "$sedexpr1" | sed -n -e "$sedexpr2"`
  test -n "$linkval" || break
  case "$linkval" in
    /* ) self_abspathname="$linkval" ;;
    * ) self_abspathname=`echo "$self_abspathname" | sed -e 's,/[^/]*$,,'`/"$linkval" ;;
  esac
done
gnulib_dir=`echo "$self_abspathname" | sed -e 's,/[^/]*$,,'`

# func_all_modules
func_all_modules ()
{
  # Filter out metainformation files like README, which are not modules.
  # Filter out unit test modules; they can be retrieved through
  # --extract-tests-module if desired.
  (cd "$gnulib_dir/modules" && ls -1) \
      | sed -e '/^CVS$/d' -e '/^ChangeLog$/d' -e '/^README$/d' -e '/^TEMPLATE$/d' -e '/^TEMPLATE-TESTS$/d' -e '/~$/d' \
      | sed -e '/-tests$/d' \
      | sort
}

# func_verify_module
# verifies a module name
func_verify_module ()
{
  if test ! -f "$gnulib_dir/modules/$module" \
     || test "CVS" = "$module" \
     || test "ChangeLog" = "$module" \
     || test "README" = "$module" \
     || test "TEMPLATE" = "$module" \
     || test "TEMPLATE-TESTS" = "$module"; then
    echo "gnulib-tool: module $module doesn't exist" 1>&2
    module=
  fi
}

# func_verify_nontests_module
# verifies a module name, excluding tests modules
func_verify_nontests_module ()
{
  case "$module" in
    *-tests ) module= ;;
    * ) func_verify_module ;;
  esac
}

# func_verify_tests_module
# verifies a module name, considering only tests modules
func_verify_tests_module ()
{
  case "$module" in
    *-tests ) func_verify_module ;;
    * ) module= ;;
  esac
}

sed_extract_prog=':[ 	]*$/ {
  :a
    n
    s/^Description:[ 	]*$//
    s/^Files:[ 	]*$//
    s/^Depends-on:[ 	]*$//
    s/^configure\.ac:[ 	]*$//
    s/^Makefile\.am:[ 	]*$//
    s/^Include:[ 	]*$//
    s/^License:[ 	]*$//
    s/^Maintainer:[ 	]*$//
    tb
    p
    ba
  :b
}'

# func_get_description module
func_get_description ()
{
  sed -n -e "/^Description$sed_extract_prog" < "$gnulib_dir/modules/$1"
}

# func_get_filelist module
func_get_filelist ()
{
  sed -n -e "/^Files$sed_extract_prog" < "$gnulib_dir/modules/$1"
  #echo m4/onceonly.m4
  echo m4/onceonly_2_57.m4
}

# func_get_dependencies module
func_get_dependencies ()
{
  # ${module}-tests always implicitly depends on ${module}.
  echo "$1" | sed -n -e 's/-tests//p'
  # Then the explicit dependencies listed in the module description.
  sed -n -e "/^Depends-on$sed_extract_prog" < "$gnulib_dir/modules/$1"
}

# func_get_autoconf_snippet module
func_get_autoconf_snippet ()
{
  sed -n -e "/^configure\.ac$sed_extract_prog" < "$gnulib_dir/modules/$1"
}

# func_get_automake_snippet module
func_get_automake_snippet ()
{
  sed -n -e "/^Makefile\.am$sed_extract_prog" < "$gnulib_dir/modules/$1"
}

# func_get_include_directive module
func_get_include_directive ()
{
  sed -n -e "/^Include$sed_extract_prog" < "$gnulib_dir/modules/$1" | \
  sed -e 's/^\(["<]\)/#include \1/'
}

# func_get_license module
func_get_license ()
{
  sed -n -e "/^License$sed_extract_prog" < "$gnulib_dir/modules/$1"
}

# func_get_maintainer module
func_get_maintainer ()
{
  sed -n -e "/^Maintainer$sed_extract_prog" < "$gnulib_dir/modules/$1"
}

# func_get_tests_module module
func_get_tests_module ()
{
  # The naming convention for tests modules is hardwired: ${module}-tests.
  if test -f modules/"$1"-tests; then
    echo "$1"-tests
  fi
}

# func_acceptable module
# tests whether a module is acceptable.
# Input:
# - avoidlist       list of modules to avoid
func_acceptable ()
{
  for avoid in $avoidlist; do
    if test "$avoid" = "$1"; then
      return 1
    fi
  done
  return 0
}

# func_modules_transitive_closure
# Input:
# - modules         list of specified modules
# - inctests        true if tests should be included, blank otherwise
# - avoidlist       list of modules to avoid
# Output:
# - modules         list of modules, including dependencies
func_modules_transitive_closure ()
{
  while true; do
    xmodules=
    for module in $modules; do
      func_verify_module
      if test -n "$module"; then
        # Duplicate dependencies are harmless, but Jim wants a warning.
        duplicated_deps=`func_get_dependencies $module | sort | uniq -d`
        if test -n "$duplicated_deps"; then
          echo "warning: module $module has duplicated dependencies: "`echo $duplicated_deps` 1>&2
        fi
        if func_acceptable $module; then
          xmodules="$xmodules $module"
          for depmodule in `func_get_dependencies $module`; do
            if func_acceptable $depmodule; then
              xmodules="$xmodules $depmodule"
            fi
          done
          if test -n "$inctests"; then
            testsmodule=`func_get_tests_module $module`
            if test -n "$testsmodule"; then
              if func_acceptable $testsmodule; then
                xmodules="$xmodules $testsmodule"
                for depmodule in `func_get_dependencies $testsmodule`; do
                  if func_acceptable $depmodule; then
                    xmodules="$xmodules $depmodule"
                  fi
                done
              fi
            fi
          fi
        fi
      fi
    done
    xmodules=`for m in $xmodules; do echo $m; done | sort | uniq`
    if test "$xmodules" = "$modules"; then
      break
    fi
    modules="$xmodules"
  done
}

# func_modules_to_filelist
# Input:
# - modules         list of modules, including dependencies
# Output:
# - files           list of files
func_modules_to_filelist ()
{
  files=
  for module in $modules; do
    func_verify_module
    if test -n "$module"; then
      files="$files "`func_get_filelist $module`
    fi
  done
  files=`for f in $files; do echo $f; done | sort | uniq`
}

# func_emit_lib_Makefile_am
# emits the contents of lib/Makefile.am to standard output.
# Input:
# - modules         list of modules, including dependencies
# - libname         library name
# - libtool         true if libtool will be used, blank otherwise
# - cmd             (optional) command that led to this invocation
# - actioncmd       (optional) command that will reproduce this invocation
func_emit_lib_Makefile_am ()
{
  if test -n "$libtool"; then
    libext=la
    perhapsLT=LT
  else
    libext=a
    perhapsLT=
  fi
  echo "## Process this file with automake to produce Makefile.in."
  echo "# Copyright (C) 2004 Free Software Foundation, Inc."
  echo "#"
  echo "# This file is free software, distributed under the terms of the GNU"
  echo "# General Public License.  As a special exception to the GNU General"
  echo "# Public License, this file may be distributed as part of a program"
  echo "# that contains a configuration script generated by Automake, under"
  echo "# the same distribution terms as the rest of that program."
  echo "#"
  echo "# Generated by gnulib-tool."
  if test -n "$cmd"; then
    echo "# Invoked as: $cmd"
  fi
  if test -n "$actioncmd"; then
    echo "# Reproduce by: $actioncmd"
  fi
  echo
  # No need to generate dependencies since the sources are in gnulib, not here.
  echo "AUTOMAKE_OPTIONS = 1.5 gnits no-dependencies"
  echo
  echo "noinst_${perhapsLT}LIBRARIES = $libname.$libext"
  echo
  echo "${libname}_${libext}_SOURCES ="
  echo "${libname}_${libext}_LIBADD = @${perhapsLT}LIBOBJS@"
  echo "EXTRA_DIST ="
  echo "BUILT_SOURCES ="
  echo "SUFFIXES ="
  echo "MOSTLYCLEANFILES ="
  echo "CLEANFILES ="
  echo "DISTCLEANFILES ="
  echo "MAINTAINERCLEANFILES ="
  echo
  for module in $modules; do
    func_verify_nontests_module
    if test -n "$module"; then
      {
        func_get_automake_snippet "$module" |
          sed -e 's,lib_\([A-Z][A-Z]*\),'"${libname}_${libext}"'_\1,g'
        if test "$module" = 'alloca'; then
          echo "${libname}_${libext}_LIBADD += @${perhapsLT}ALLOCA@"
        fi
      } > amsnippet.tmp
      # Skip the contents if its entirely empty.
      if grep '[^ 	]' amsnippet.tmp > /dev/null ; then
        echo "## begin gnulib module $module"
        echo
        cat amsnippet.tmp
        echo "## end   gnulib module $module"
        echo
      fi
      rm -f amsnippet.tmp
    fi
  done
  echo
  echo "# Makefile.am ends here"
}

# func_emit_tests_Makefile_am
# emits the contents of tests/Makefile.am to standard output.
# Input:
# - modules         list of modules, including dependencies
# - libname         library name
# - libtool         true if libtool will be used, blank otherwise
# - sourcebase      relative directory containing lib source code
func_emit_tests_Makefile_am ()
{
  if test -n "$libtool"; then
    libext=la
  else
    libext=a
  fi
  echo "## Process this file with automake to produce Makefile.in."
  echo "# Copyright (C) 2004-2005 Free Software Foundation, Inc."
  echo "#"
  echo "# This file is free software, distributed under the terms of the GNU"
  echo "# General Public License.  As a special exception to the GNU General"
  echo "# Public License, this file may be distributed as part of a program"
  echo "# that contains a configuration script generated by Automake, under"
  echo "# the same distribution terms as the rest of that program."
  echo "#"
  echo "# Generated by gnulib-tool."
  echo
  # Generate dependencies here, since it eases the debugging of test failures.
  echo "AUTOMAKE_OPTIONS = 1.5 foreign"
  echo
  echo "ACLOCAL_AMFLAGS = -I ../m4"
  echo
  echo "TESTS ="
  echo "noinst_PROGRAMS ="
  echo "EXTRA_DIST ="
  echo "BUILT_SOURCES ="
  echo "SUFFIXES ="
  echo "MOSTLYCLEANFILES ="
  echo "CLEANFILES ="
  echo "DISTCLEANFILES ="
  echo "MAINTAINERCLEANFILES ="
  echo
  echo "AM_CPPFLAGS = \\"
  echo "  -I. -I\$(srcdir) \\"
  echo "  -I.. -I\$(srcdir)/.. \\"
  echo "  -I../${sourcebase-lib} -I\$(srcdir)/../${sourcebase-lib}"
  echo
  echo "LDADD = ../${sourcebase-lib}/${libname}.${libext}"
  echo
  for module in $modules; do
    func_verify_tests_module
    if test -n "$module"; then
      func_get_automake_snippet "$module" > amsnippet.tmp
      # Skip the contents if its entirely empty.
      if grep '[^ 	]' amsnippet.tmp > /dev/null ; then
        echo "## begin gnulib module $module"
        echo
        cat amsnippet.tmp
        echo "## end   gnulib module $module"
        echo
      fi
      rm -f amsnippet.tmp
    fi
  done
  echo "# Clean up after Solaris cc."
  echo "clean-local:"
  echo "	rm -rf SunWS_cache"
  echo
  echo "# Makefile.am ends here"
}

# func_import modules
# Uses also the variables
# - destdir         target directory
# - libname         library name
# - sourcebase      directory relative to destdir where to place source code
# - m4base          directory relative to destdir where to place *.m4 macros
# - auxdir          directory relative to destdir where to place build aux files
# - avoidlist       list of modules to avoid, from --avoid
# - lgpl            true if library's license shall be LGPL, blank otherwise
# - libtool         true if libtool will be used, blank otherwise
# - macro_prefix    prefix of gl_EARLY, gl_INIT macros to use
# - dry_run         true if actions shall only be printed, blank otherwise
# - symbolic        true if files should be symlinked, copied otherwise
# - supplied_opts   all options passed to gnulib-tool
func_import ()
{
  # Get the cached settings.
  cached_specified_modules=
  cached_avoidlist=
  cached_sourcebase=
  cached_m4base=
  cached_libname=
  cached_lgpl=
  cached_libtool=
  cached_macro_prefix=
  cached_files=
  if test -f "$destdir"/$m4base/gnulib-cache.m4; then
    my_sed_traces='
      s,#.*$,,
      s,^dnl .*$,,
      s, dnl .*$,,
      /gl_MODULES(/ {
        s,^.*gl_MODULES([[ ]*\([^])]*\).*$,cached_specified_modules="\1",p
      }
      /gl_AVOID(/ {
        s,^.*gl_AVOID([[ ]*\([^])]*\).*$,cached_avoidlist="\1",p
      }
      /gl_SOURCE_BASE(/ {
        s,^.*gl_SOURCE_BASE([[ ]*\([^])]*\).*$,cached_sourcebase="\1",p
      }
      /gl_M4_BASE(/ {
        s,^.*gl_M4_BASE([[ ]*\([^])]*\).*$,cached_m4base="\1",p
      }
      /gl_LIB(/ {
        s,^.*gl_LIB([[ ]*\([^])]*\).*$,cached_libname="\1",p
      }
      /gl_LGPL/ {
        s,^.*$,cached_lgpl=true,p
      }
      /gl_LIBTOOL/ {
        s,^.*$,cached_libtool=true,p
      }
      /gl_MACRO_PREFIX(/ {
        s,^.*gl_MACRO_PREFIX([[ ]*\([^])]*\).*$,cached_macro_prefix="\1",p
      }'
    eval `sed -n -e "$my_sed_traces" < "$destdir"/$m4base/gnulib-cache.m4`
    if test -f "$destdir"/$m4base/gnulib-comp.m4; then
      my_sed_traces='
        s,#.*$,,
        s,^dnl .*$,,
        s, dnl .*$,,
        /AC_DEFUN(\['"${cached_macro_prefix}"'_FILE_LIST\], \[/ {
          s,^.*$,cached_files=",p
          n
          ta
          :a
          s,^\]).*$,",
          tb
          p
          n
          ba
          :b
          p
        }'
      eval `sed -n -e "$my_sed_traces" < "$destdir"/$m4base/gnulib-comp.m4`
    fi
  fi

  # Merge the cached settings with the specified ones.
  # The m4base must be the same as expected from the pathname.
  if test -n "$cached_m4base" && test "$cached_m4base" != "$m4base"; then
    func_fatal_error "$m4base/gnulib-cache.m4 is expected to contain gl_M4_BASE([$m4base])"
  fi
  # Append the cached and the specified module names. So that
  # "gnulib-tool --import foo" means to add the module foo.
  specified_modules="$cached_specified_modules $1"
  # Append the cached and the specified avoidlist. This is probably better
  # than dropping the cached one when --avoid is specified at least once.
  avoidlist=`echo $cached_avoidlist $avoidlist`
  # The sourcebase defaults to the cached one.
  if test -z "$sourcebase"; then
    sourcebase="$cached_sourcebase"
    if test -z "$sourcebase"; then
      func_fatal_error "missing --source-base option"
    fi
  fi
  # The libname defaults to the cached one.
  if test -z "$libname"; then
    libname="$cached_libname"
    if test -z "$libname"; then
      func_fatal_error "missing --lib option"
    fi
  fi
  # Require LGPL if specified either way.
  if test -z "$lgpl"; then
    lgpl="$cached_lgpl"
  fi
  # Use libtool if specified either way.
  if test -z "$libtool"; then
    libtool="$cached_libtool"
  fi
  # The macro_prefix defaults to the cached one.
  if test -z "$macro_prefix"; then
    macro_prefix="$cached_macro_prefix"
    if test -z "$macro_prefix"; then
      func_fatal_error "missing --macro-prefix option"
    fi
  fi

  # Canonicalize the list of specified modules.
  specified_modules=`for m in $specified_modules; do echo $m; done | sort | uniq`

  # Determine final module list.
  modules="$specified_modules"
  func_modules_transitive_closure
  echo "Module list with included dependencies:"
  echo "$modules" | sed -e 's/^/  /'

  # If --lgpl, check the license of modules are compatible.
  if test -n "$lgpl"; then
    for module in $modules; do
      license=`func_get_license $module`
      case $license in
        LGPL | 'public domain' | 'unlimited') ;;
        *) func_fatal_error "incompatible license on module $module: $license" ;;
      esac
    done
  fi

  # Determine final file list.
  func_modules_to_filelist
  echo "File list:"
  echo "$files" | sed -e 's/^/  /'

  test -n "$files" \
    || func_fatal_error "refusing to do nothing"

  # Add m4/gnulib-tool.m4 to the file list. It is not part of any module.
  new_files="$files m4/gnulib-tool.m4"
  old_files="$cached_files"
  if test -f "$destdir"/$m4base/gnulib-tool.m4; then
    old_files="$old_files m4/gnulib-tool.m4"
  fi

  # Copy files or make symbolic links. Remove obsolete files.
  for f1 in $old_files; do
    case "$f1" in
      build-aux/*) g1=`echo "$f1" | sed -e "s,^build-aux/,$auxdir/,"` ;;
      lib/*) g1=`echo "$f1" | sed -e "s,^lib/,$cached_sourcebase/,"` ;;
      m4/*) g1=`echo "$f1" | sed -e "s,^m4/,$cached_m4base/,"` ;;
      *) g1="$f1" ;;
    esac
    still_present=
    for f2 in $new_files; do
      case "$f2" in
        build-aux/*) g2=`echo "$f2" | sed -e "s,^build-aux/,$auxdir/,"` ;;
        lib/*) g2=`echo "$f2" | sed -e "s,^lib/,$sourcebase/,"` ;;
        m4/*) g2=`echo "$f2" | sed -e "s,^m4/,$m4base/,"` ;;
        *) g2="$f2" ;;
      esac
      if test "$g2" = "$g1"; then
        still_present=true
        break
      fi
    done
    if test -z "$still_present"; then
      # Remove the file. Do nothing if the user already removed it.
      if test -f "$destdir/$g1"; then
        echo "Removing file $g1 (backup in ${g1}~)"
        test -n "$dry_run" && dry=echo
        $dry mv -f "$destdir/$g1" "$destdir/${g1}~" || func_fatal_error "failed"
      fi
    fi
  done
  for f2 in $new_files; do
    case "$f2" in
      build-aux/*) g2=`echo "$f2" | sed -e "s,^build-aux/,$auxdir/,"` ;;
      lib/*) g2=`echo "$f2" | sed -e "s,^lib/,$sourcebase/,"` ;;
      m4/*) g2=`echo "$f2" | sed -e "s,^m4/,$m4base/,"` ;;
      *) g2="$f2" ;;
    esac
    already_present=
    for f1 in $old_files; do
      case "$f1" in
        build-aux/*) g1=`echo "$f1" | sed -e "s,^build-aux/,$auxdir/,"` ;;
        lib/*) g1=`echo "$f1" | sed -e "s,^lib/,$cached_sourcebase/,"` ;;
        m4/*) g1=`echo "$f1" | sed -e "s,^m4/,$cached_m4base/,"` ;;
        *) g1="$f1" ;;
      esac
      if test "$g1" = "$g2"; then
        already_present=true
        break
      fi
    done
    cp "$gnulib_dir/$f2" "$destdir/$g2.tmp" || func_fatal_error "failed"
    if test -n "$lgpl"; then
      # Update license.
      case "$f2" in
        lib/*)
          sed -e 's/GNU General/GNU Lesser General/g' \
              -e 's/version 2\([ ,]\)/version 2.1\1/g' \
            < "$gnulib_dir/$f2" > "$destdir/$g2.tmp" || func_fatal_error "failed"
          ;;
      esac
    fi
    if test -f "$destdir/$g2"; then
      # The file already exists.
      if cmp "$destdir/$g2" "$destdir/$g2.tmp" > /dev/null; then
        : # The file has not changed.
      else
        # Replace the file.
        if test -n "$already_present"; then
          echo "Updating file $g2 (backup in ${g2}~)"
        else
          echo "Replacing file $g2 (non-gnulib code backuped in ${g2}~) !!"
        fi
        test -n "$dry_run" && dry=echo
        $dry mv -f "$destdir/$g2" "$destdir/${g2}~" || func_fatal_error "failed"
        if test -z "$symbolic" && cmp "$gnulib_dir/$f2" "$destdir/$g2.tmp"; then
          func_ln_if_changed "$gnulib_dir/$f2" "$destdir/$g2"
        else
          $dry mv -f "$destdir/$g2.tmp" "$destdir/${g2}" || func_fatal_error "failed"
        fi
      fi
    else
      # Install the file.
      # Don't protest if the file should be there but isn't: it happens
      # frequently that developers don't put autogenerated files into CVS.
      echo "Copying file $g2"
      test -n "$dry_run" && dry=echo
      if test -z "$symbolic" && cmp "$gnulib_dir/$f2" "$destdir/$g2.tmp"; then
        func_ln_if_changed "$gnulib_dir/$f2" "$destdir/$g2"
      else
        $dry mv -f "$destdir/$g2.tmp" "$destdir/${g2}" || func_fatal_error "failed"
      fi
    fi
  done

  # Command-line invocation printed in various files.
  cmd="gnulib-tool $supplied_opts"

  # Command-line invocation printed in a comment in generated gnulib-cache.m4.
  actioncmd="gnulib-tool --import"
  actioncmd="$actioncmd --dir=$destdir"
  actioncmd="$actioncmd --lib=$libname"
  actioncmd="$actioncmd --source-base=$sourcebase"
  actioncmd="$actioncmd --m4-base=$m4base"
  actioncmd="$actioncmd --aux-dir=$auxdir"
  for module in $avoidlist; do
    actioncmd="$actioncmd --avoid=$module"
  done
  if test -n "$lgpl"; then
    actioncmd="$actioncmd --lgpl"
  fi
  if test -n "$libtool"; then
    actioncmd="$actioncmd --libtool"
  fi
  actioncmd="$actioncmd -macro-prefix=$macro_prefix"
  actioncmd="$actioncmd `echo $specified_modules`"

  # Create lib/Makefile.am.
  if test -z "$dry_run"; then
    func_emit_lib_Makefile_am > "$destdir"/$sourcebase/Makefile.am.tmp
    if test -f "$destdir"/$sourcebase/Makefile.am; then
      if cmp "$destdir"/$sourcebase/Makefile.am "$destdir"/$sourcebase/Makefile.am.tmp > /dev/null; then
        rm -f "$destdir"/$sourcebase/Makefile.am.tmp
      else
        echo "Updating $sourcebase/Makefile.am (backup in $sourcebase/Makefile.am~)"
        mv -f "$destdir"/$sourcebase/Makefile.am "$destdir"/$sourcebase/Makefile.am~
        mv -f "$destdir"/$sourcebase/Makefile.am.tmp "$destdir"/$sourcebase/Makefile.am
      fi
    else
      echo "Creating $sourcebase/Makefile.am"
      mv -f "$destdir"/$sourcebase/Makefile.am.tmp "$destdir"/$sourcebase/Makefile.am
    fi
  else
    echo "Creating $sourcebase/Makefile.am..."
    func_emit_lib_Makefile_am
  fi

  # Create m4/gnulib-cache.m4.
  (
    if test -z "$dry_run"; then
      exec > "$destdir"/$m4base/gnulib-cache.m4.tmp
    else
      echo "Creating $m4base/gnulib-cache.m4..."
      echo "# $destdir/$m4base/gnulib-cache.m4"
    fi
    echo "# Copyright (C) 2004 Free Software Foundation, Inc."
    echo "# This file is free software, distributed under the terms of the GNU"
    echo "# General Public License.  As a special exception to the GNU General"
    echo "# Public License, this file may be distributed as part of a program"
    echo "# that contains a configuration script generated by Autoconf, under"
    echo "# the same distribution terms as the rest of that program."
    echo "#"
    echo "# Generated by gnulib-tool."
    echo "#"
    echo "# This file represents the specification of how gnulib-tool is used."
    echo "# It acts as a cache: It is written and read by gnulib-tool."
    echo "# In projects using CVS, this file is meant to be stored in CVS,"
    echo "# like the configure.ac and various Makefile.am files."
    echo
    echo
    echo "# Specification in the form of a command-line invocation:"
    echo "#   $actioncmd"
    echo
    echo "# Specification in the form of a few gnulib-tool.m4 macro invocations:"
    echo "gl_MODULES(["`echo $specified_modules`"])"
    echo "gl_AVOID([$avoidlist])"
    echo "gl_SOURCE_BASE([$sourcebase])"
    echo "gl_M4_BASE([$m4base])"
    echo "gl_LIB([$libname])"
    test -z "$lgpl" || echo "gl_LGPL"
    test -z "$libtool" || echo "gl_LIBTOOL"
    echo "gl_MACRO_PREFIX([$macro_prefix])"
    echo
    echo "# gnulib-cache.m4 ends here"
  )
  if test -z "$dry_run"; then
    if test -f "$destdir"/$m4base/gnulib-cache.m4; then
      if cmp "$destdir"/$m4base/gnulib-cache.m4 "$destdir"/$m4base/gnulib-cache.m4.tmp > /dev/null; then
        rm -f "$destdir"/$m4base/gnulib-cache.m4.tmp
      else
        echo "Updating $m4base/gnulib-cache.m4 (backup in $m4base/gnulib-cache.m4~)"
        mv -f "$destdir"/$m4base/gnulib-cache.m4 "$destdir"/$m4base/gnulib-cache.m4~
        mv -f "$destdir"/$m4base/gnulib-cache.m4.tmp "$destdir"/$m4base/gnulib-cache.m4
      fi
    else
      echo "Creating $m4base/gnulib-cache.m4"
      mv -f "$destdir"/$m4base/gnulib-cache.m4.tmp "$destdir"/$m4base/gnulib-cache.m4
    fi
  fi

  # Create m4/gnulib-comp.m4.
  (
    if test -z "$dry_run"; then
      exec > "$destdir"/$m4base/gnulib-comp.m4.tmp
    else
      echo "Creating $m4base/gnulib-comp.m4..."
      echo "# $destdir/$m4base/gnulib-comp.m4"
    fi
    echo "# Copyright (C) 2004 Free Software Foundation, Inc."
    echo "# This file is free software, distributed under the terms of the GNU"
    echo "# General Public License.  As a special exception to the GNU General"
    echo "# Public License, this file may be distributed as part of a program"
    echo "# that contains a configuration script generated by Autoconf, under"
    echo "# the same distribution terms as the rest of that program."
    echo "#"
    echo "# Generated by gnulib-tool."
    echo "#"
    echo "# This file represents the compiled summary of the specification in"
    echo "# gnulib-cache.m4. It lists the computed macro invocations that need"
    echo "# to be invoked from configure.ac."
    echo "# In projects using CVS, this file can be treated like other built files."
    echo
    echo
    echo "# This macro should be invoked from $configure_ac, in the section"
    echo "# \"Checks for programs\", right after AC_PROG_CC, and certainly before"
    echo "# any checks for libraries, header files, types and library functions."
    echo "AC_DEFUN([${macro_prefix}_EARLY],"
    echo "["
    if grep AC_GNU_SOURCE "$destdir"/$m4base/*.m4 > /dev/null; then
      echo "  AC_REQUIRE([AC_GNU_SOURCE])"
    fi
    if grep gl_USE_SYSTEM_EXTENSIONS "$destdir"/$m4base/*.m4 > /dev/null; then
      echo "  AC_REQUIRE([gl_USE_SYSTEM_EXTENSIONS])"
    fi
    echo "])"
    echo
    echo "# This macro should be invoked from $configure_ac, in the section"
    echo "# \"Check for header files, types and library functions\"."
    echo "AC_DEFUN([${macro_prefix}_INIT],"
    echo "["
    for module in $modules; do
      func_verify_module
      if test -n "$module"; then
        func_get_autoconf_snippet "$module" | sed -e '/^$/d;' -e 's/^/  /' -e 's/AM_GNU_GETTEXT(\[external\])/dnl you must add AM_GNU_GETTEXT([external]) or similar to configure.ac./'
        if test "$module" = 'alloca' && test -n "$libtool"; then
          echo 'changequote(,)dnl'
          echo 'LTALLOCA=`echo "$ALLOCA" | sed '"'"'s/\.[^.]* /.lo /g;s/\.[^.]*$/.lo/'"'"'`'
          echo 'changequote([, ])dnl'
          echo 'AC_SUBST([LTALLOCA])'
        fi
      fi
    done
    echo "])"
    echo
    echo "# This macro records the list of files which have been installed by"
    echo "# gnulib-tool and may be removed by future gnulib-tool invocations."
    echo "AC_DEFUN([${macro_prefix}_FILE_LIST], ["
    echo "$files" | sed -e 's,^,  ,'
    echo "])"
    echo
    echo "# gnulib-comp.m4 ends here"
  )
  if test -z "$dry_run"; then
    if test -f "$destdir"/$m4base/gnulib-comp.m4; then
      if cmp "$destdir"/$m4base/gnulib-comp.m4 "$destdir"/$m4base/gnulib-comp.m4.tmp > /dev/null; then
        rm -f "$destdir"/$m4base/gnulib-comp.m4.tmp
      else
        echo "Updating $m4base/gnulib-comp.m4 (backup in $m4base/gnulib-comp.m4~)"
        mv -f "$destdir"/$m4base/gnulib-comp.m4 "$destdir"/$m4base/gnulib-comp.m4~
        mv -f "$destdir"/$m4base/gnulib-comp.m4.tmp "$destdir"/$m4base/gnulib-comp.m4
      fi
    else
      echo "Creating $m4base/gnulib-comp.m4"
      mv -f "$destdir"/$m4base/gnulib-comp.m4.tmp "$destdir"/$m4base/gnulib-comp.m4
    fi
  fi

  echo "Finished."
  echo
  echo "You may need to add #include directives for the following .h files."
  for module in $modules; do
    func_get_include_directive "$module"
  done | LC_ALL=C sort -u | sed -e '/^$/d;' -e 's/^/  /'
  echo
  echo "Don't forget to"
  echo "  - add \"$sourcebase/Makefile\" to AC_CONFIG_FILES in $configure_ac,"
  sourcebase_dir=`echo "$sourcebase" | sed -n -e 's,/[^/]*$,/,p'`
  sourcebase_base=`basename "$sourcebase"`
  echo "  - mention \"${sourcebase_base}\" in SUBDIRS in ${sourcebase_dir}Makefile.am,"
  echo "  - mention \"-I ${m4base}\" in ACLOCAL_AMFLAGS in Makefile.am,"
  echo "  - invoke ${macro_prefix}_EARLY in $configure_ac, right after AC_PROG_CC,"
  echo "  - invoke ${macro_prefix}_INIT in $configure_ac."
}

# func_create_testdir testdir modules
# Input:
# - auxdir          directory relative to destdir where to place build aux files
func_create_testdir ()
{
  testdir="$1"
  modules="$2"
  modules=`for m in $modules; do echo $m; done | sort | uniq`

  # Determine final module list.
  func_modules_transitive_closure
  echo "Module list with included dependencies:"
  echo "$modules" | sed -e 's/^/  /'

  # Determine final file list.
  func_modules_to_filelist
  echo "File list:"
  echo "$files" | sed -e 's/^/  /'

  # Create directories.
  for d in `echo "$files" | sed -n -e 's,^\(.*\)/[^/]*,\1,p'`; do
    if test "$d" = build-aux; then
      mkdir -p "$testdir/$auxdir"
    else
      mkdir -p "$testdir/$d"
    fi
  done

  # Copy files or make symbolic links.
  for f in $files; do
    case "$f" in
      build-aux/*) g=`echo "$f" | sed -e "s,^build-aux/,$auxdir/,"` ;;
      *) g="$f" ;;
    esac
    ln "$gnulib_dir/$f" "$testdir/$g" 2>/dev/null ||
    if test -z "$symbolic"; then
      cp -p "$gnulib_dir/$f" "$testdir/$g"
    else
      ln -s "$gnulib_dir/$f" "$testdir/$g"
    fi
  done

  # Create lib/Makefile.am.
  mkdir -p "$testdir/lib"
  func_emit_lib_Makefile_am > "$testdir/lib/Makefile.am"

  # Create m4/Makefile.am.
  mkdir -p "$testdir/m4"
  (echo "## Process this file with automake to produce Makefile.in."
   echo
   echo "EXTRA_DIST ="
   for f in $files; do
     case "$f" in
       m4/* )
         echo "EXTRA_DIST += "`echo "$f" | sed -e 's,^m4/,,'` ;;
     esac
   done
  ) > "$testdir/m4/Makefile.am"

  subdirs="lib m4"
  subdirs_with_configure_ac=""

  if test -f "$testdir"/m4/gettext.m4; then
    # Avoid stupid error message from automake:
    # "AM_GNU_GETTEXT used but `po' not in SUBDIRS"
    mkdir -p "$testdir/po"
    (echo "## Process this file with automake to produce Makefile.in."
    ) > "$testdir/po/Makefile.am"
    subdirs="$subdirs po"
  fi

  if test -n "$inctests"; then
    test -d "$testdir/tests" || mkdir "$testdir/tests"
    # Create tests/Makefile.am.
    sourcebase=lib
    func_emit_tests_Makefile_am > "$testdir/tests/Makefile.am"
    # Create tests/configure.ac.
    (echo "# Process this file with autoconf to produce a configure script."
     echo "AC_INIT([dummy], [0])"
     echo "AC_CONFIG_AUX_DIR([../$auxdir])"
     echo "AM_INIT_AUTOMAKE"
     echo
     echo "AM_CONFIG_HEADER([config.h])"
     echo
     echo "AC_PROG_CC"
     echo "AC_PROG_INSTALL"
     echo "AC_PROG_MAKE_SET"
     echo "AC_PROG_RANLIB"
     echo
     if grep AC_GNU_SOURCE "$testdir"/m4/*.m4 > /dev/null; then
       echo "AC_GNU_SOURCE"
       echo
     fi
     if grep gl_USE_SYSTEM_EXTENSIONS "$testdir"/m4/*.m4 > /dev/null; then
       echo "gl_USE_SYSTEM_EXTENSIONS"
       echo
     fi
     # We don't have explicit ordering constraints between the various
     # autoconf snippets. It's cleanest to put those of the library before
     # those of the tests.
     for module in $modules; do
       func_verify_nontests_module
       if test -n "$module"; then
         func_get_autoconf_snippet "$module"
       fi
     done
     for module in $modules; do
       func_verify_tests_module
       if test -n "$module"; then
         func_get_autoconf_snippet "$module"
       fi
     done
     echo
     # Usually tests/config.h will be a superset of config.h. Verify this by
     # "merging" config.h into tests/config.h; look out for gcc warnings.
     echo "AH_TOP([#include \"../config.h\"])"
     echo
     echo "AC_OUTPUT([Makefile])"
    ) > "$testdir/tests/configure.ac"
    subdirs="$subdirs tests"
    subdirs_with_configure_ac="$subdirs_with_configure_ac tests"
  fi

  # Create Makefile.am.
  (echo "## Process this file with automake to produce Makefile.in."
   echo
   echo "AUTOMAKE_OPTIONS = 1.5 foreign"
   echo
   echo "SUBDIRS = $subdirs"
   echo
   echo "ACLOCAL_AMFLAGS = -I m4"
  ) > "$testdir/Makefile.am"

  # Create configure.ac.
  (echo "# Process this file with autoconf to produce a configure script."
   echo "AC_INIT([dummy], [0])"
   if test "$auxdir" != "."; then
     echo "AC_CONFIG_AUX_DIR([$auxdir])"
   fi
   echo "AM_INIT_AUTOMAKE"
   echo
   echo "AM_CONFIG_HEADER([config.h])"
   echo
   echo "AC_PROG_CC"
   echo "AC_PROG_INSTALL"
   echo "AC_PROG_MAKE_SET"
   echo "AC_PROG_RANLIB"
   echo
   if grep AC_GNU_SOURCE "$testdir"/m4/*.m4 > /dev/null; then
     echo "AC_GNU_SOURCE"
     echo
   fi
   if grep gl_USE_SYSTEM_EXTENSIONS "$testdir"/m4/*.m4 > /dev/null; then
     echo "gl_USE_SYSTEM_EXTENSIONS"
     echo
   fi
   for module in $modules; do
     func_verify_nontests_module
     if test -n "$module"; then
       func_get_autoconf_snippet "$module"
     fi
   done
   echo
   if test -n "$subdirs_with_configure_ac"; then
     echo "AC_CONFIG_SUBDIRS(["`echo $subdirs_with_configure_ac`"])"
   fi
   makefiles="Makefile"
   for d in $subdirs; do
     # For subdirs that have a configure.ac by their own, it's the subdir's
     # configure.ac which creates the subdir's Makefile.am, not this one.
     case " $subdirs_with_configure_ac " in
       *" $d "*) ;;
       *) makefiles="$makefiles $d/Makefile" ;;
     esac
   done
   echo "AC_OUTPUT([$makefiles])"
  ) > "$testdir/configure.ac"

  # Create autogenerated files.
  (cd "$testdir"
   echo "executing ${AUTORECONF} --force --install"
   ${AUTORECONF} --force --install
  )
  if grep '^BUILT_SOURCES *+=' "$testdir/lib/Makefile.am" > /dev/null; then
    (cd "$testdir"
     ./configure
       cd lib
       built_sources=`grep '^BUILT_SOURCES *=' Makefile.in | sed -e 's/^BUILT_SOURCES *=//'`
       if test -n "$built_sources"; then
         make $built_sources
       fi
       cd ..
     make distclean
    )
  fi
}

# func_create_megatestdir megatestdir allmodules
# Input:
# - auxdir          directory relative to destdir where to place build aux files
func_create_megatestdir ()
{
  megatestdir="$1"
  allmodules="$2"
  if test -z "$allmodules"; then
    allmodules=`func_all_modules`
  fi

  megasubdirs=
  # First, all modules one by one.
  for onemodule in $allmodules; do
    func_create_testdir "$megatestdir/$onemodule" $onemodule
    megasubdirs="${megasubdirs}$onemodule "
  done
  # Then, all modules all together.
  # Except fnmatch-posix, which conflicts with fnmatch-gnu. FIXME.
  allmodules=`for m in $allmodules; do if test $m != fnmatch-posix; then echo $m; fi; done`
  func_create_testdir "$megatestdir/ALL" "$allmodules"
  megasubdirs="${megasubdirs}ALL"

  # Create Makefile.am.
  (echo "## Process this file with automake to produce Makefile.in."
   echo
   echo "AUTOMAKE_OPTIONS = 1.5 foreign"
   echo
   echo "SUBDIRS = $megasubdirs"
  ) > "$megatestdir/Makefile.am"

  # Create configure.ac.
  (echo "# Process this file with autoconf to produce a configure script."
   echo "AC_INIT([dummy], [0])"
   if test "$auxdir" != "."; then
     echo "AC_CONFIG_AUX_DIR([$auxdir])"
   fi
   echo "AM_INIT_AUTOMAKE"
   echo
   echo "AC_PROG_MAKE_SET"
   echo
   echo "AC_CONFIG_SUBDIRS([$megasubdirs])"
   echo "AC_OUTPUT([Makefile])"
  ) > "$megatestdir/configure.ac"

  # Create autogenerated files.
  (cd "$megatestdir"
   echo "executing ${AUTORECONF} --install"
   ${AUTORECONF} --install
  )
}

case $mode in
  "" )
    func_fatal_error "no mode specified" ;;

  list )
    func_all_modules
    ;;

  import )
    # Where to import.
    if test -z "$destdir"; then
      destdir=.
    fi
    test -d "$destdir" \
      || func_fatal_error "destination directory does not exist: $destdir"

    # Prefer configure.ac to configure.in
    test -f "$destdir"/configure.in && configure_ac="$destdir/configure.in"
    test -f "$destdir"/configure.ac && configure_ac="$destdir/configure.ac"
    test -f "$configure_ac" \
      || func_fatal_error "cannot find $destdir/configure.ac"

    # Get settings.
    my_sed_traces='s,#.*$,,; s,^dnl .*$,,; s, dnl .*$,,;
      /gl_MODULES[^_]/  {
        s,^.*gl_MODULES([[   ]*\([^])]*\).*$,cached_modules="\1",; p;
      };
      /gl_AVOID[^_]/  {
        s,^.*gl_AVOID([[   ]*\([^])]*\).*$,cached_avoidlist="\1",; p;
      };
      /gl_SOURCE_BASE/   {
        s,^.*gl_SOURCE_BASE([[         ]*\([^])]*\).*$,cached_sourcebase="\1",; p;
      };
      /gl_M4_BASE/   {
        s,^.*gl_M4_BASE([[         ]*\([^])]*\).*$,cached_m4base="\1",; p;
      };
      /gl_LIB/   {
        s,^.*gl_LIB([[         ]*\([^])]*\).*$,cached_libname="\1",; p;
      };
      /AC_CONFIG_AUX_DIR/  {
        s,^.*AC_CONFIG_AUX_DIR([[         ]*\([^])]*\).*$,ac_auxdir="\1",; p;
      }
      /A[CM]_PROG_LIBTOOL/ { s,^.*$,seen_libtool=:,; p; };
      /LT_INIT/            { s,^.*$,seen_libtool=:,; p; };
      /gl_LGPL/            { s,^.*$,cached_lgpl=true,; p; };
      /gl_LIBTOOL/         { s,^.*$,cached_libtool=:,; p; };
      /gl_MACRO_PREFIX/   {
        s,^.*gl_MACRO_PREFIX([[         ]*\([^])]*\).*$,cached_macro_prefix="\1",; p;
      };
      d;'
    eval `cat $configure_ac | sed "$my_sed_traces"`

    # Override libname?
    if test -z "$supplied_libname" && test -n "$cached_libname"; then
      libname="$cached_libname"
    fi

    # Set up source base.
    test -z "$sourcebase" && sourcebase="$cached_sourcebase"
    test -z "$sourcebase" && sourcebase="lib"
    test -d "$destdir/$sourcebase" \
      || { test -z "$dry_run" && mkdir "$destdir/$sourcebase"; } \
      || func_fatal_error "source base $destdir/$sourcebase doesn't exist"

    # Set up m4 base.
    test -z "$m4base" && m4base="$cached_m4base"
    test -z "$m4base" && m4base="m4"
    test -d "$destdir/$m4base" \
      || { test -z "$dry_run" && mkdir "$destdir/$m4base"; } \
      || func_fatal_error "m4 base $destdir/$m4base doesn't exist"

    # Set up auxiliary directory.
    test -z "$auxdir" && auxdir="$ac_auxdir"
    test -z "$auxdir" && auxdir="build-aux"
    test -d "$destdir/$auxdir" \
      || { test -z "$dry_run" && mkdir "$destdir/$auxdir"; } \
      || func_fatal_error "aux directory $destdir/$auxdir doesn't exist"

    # Require LGPL?
    if test -n "$cached_lgpl"; then
      lgpl=true
    fi

    # Using libtool?
    if test -n "$seen_libtool" || test -n "$cached_libtool"; then
      libtool=true
    fi

    # Macro prefix
    test -z "$macro_prefix" && macro_prefix="$cached_macro_prefix"
    test -z "$macro_prefix" && macro_prefix="gl"

    # What modules to extract.
    if test $# = 0; then
      modules="$cached_modules"
    else
      modules="$*"
    fi

    # Which modules to avoid?
    avoidlist=`echo $avoidlist $cached_avoidlist`

    func_import "$modules"
    ;;

  create-testdir )
    if test -z "$destdir"; then
      func_fatal_error "please specify --dir option"
    fi
    mkdir "$destdir"
    test -d "$destdir" \
      || func_fatal_error "could not create destination directory"
    test -n "$auxdir" || auxdir="build-aux"
    func_create_testdir "$destdir" "$*"
    ;;

  create-megatestdir )
    if test -z "$destdir"; then
      func_fatal_error "please specify --dir option"
    fi
    mkdir "$destdir" || func_fatal_error "could not create destination directory"
    test -n "$auxdir" || auxdir="build-aux"
    func_create_megatestdir "$destdir" "$*"
    ;;

  test )
    test -n "$destdir" || destdir=testdir$$
    mkdir "$destdir" || func_fatal_error "could not create destination directory"
    test -n "$auxdir" || auxdir="build-aux"
    func_create_testdir "$destdir" "$*"
    cd "$destdir"
      mkdir build
      cd build
        ../configure
        make
        make check
        make distclean
        remaining=`find . -type f -print`
        if test -n "$remaining"; then
          echo "Remaining files:" $remaining 1>&2
          echo "gnulib-tool: *** Stop." 1>&2
          exit 1
        fi
      cd ..
    cd ..
    rm -rf "$destdir"
    ;;

  megatest )
    test -n "$destdir" || destdir=testdir$$
    mkdir "$destdir" || func_fatal_error "could not create destination directory"
    test -n "$auxdir" || auxdir="build-aux"
    func_create_megatestdir "$destdir" "$*"
    cd "$destdir"
      mkdir build
      cd build
        ../configure
        make
        make check
        make distclean
        remaining=`find . -type f -print`
        if test -n "$remaining"; then
          echo "Remaining files:" $remaining 1>&2
          echo "gnulib-tool: *** Stop." 1>&2
          exit 1
        fi
      cd ..
    cd ..
    rm -rf "$destdir"
    ;;

  extract-description )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_description "$module"
      fi
    done
    ;;

  extract-filelist )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_filelist "$module"
      fi
    done
    ;;

  extract-dependencies )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_dependencies "$module"
      fi
    done
    ;;

  extract-autoconf-snippet )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_autoconf_snippet "$module"
      fi
    done
    ;;

  extract-automake-snippet )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_automake_snippet "$module"
      fi
    done
    ;;

  extract-include-directive )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_include_directive "$module"
      fi
    done
    ;;

  extract-license )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_license "$module"
      fi
    done
    ;;

  extract-maintainer )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_maintainer "$module"
      fi
    done
    ;;

  extract-tests-module )
    for module
    do
      func_verify_module
      if test -n "$module"; then
        func_get_tests_module "$module"
      fi
    done
    ;;

  * )
    func_fatal_error "unknown operation mode --$mode" ;;
esac

exit 0
